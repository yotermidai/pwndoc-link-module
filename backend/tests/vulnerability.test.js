/*
  At the end
    3 Vulnerabilities: [
      {
        status: 2
        details: [
          {locale: 'en', title: 'Vulnerability English 1', vulnType: 'Internal'}, 
          {
            locale: 'fr',
            title: 'Vulnerability French 1',
            vulnType: 'Internal',
            description: 'French vuln description',
            observation: 'French vuln observation',
            remediation: 'French vuln remediation'
          }
        ]
      },
      {
        cvssv3: "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        cvssScore: "10.0",
        cvssSeverity: "Critical",
        status: 0
        details: [
          {locale: 'en', title: 'Vulnerability English 2', vulnType: 'Internal'},
          {
            locale: 'fr',
            title: 'Vulnerability French 2',
            vulnType: 'Internal',
            description: 'French vuln description',
            observation: 'French vuln observation',
            remediation: 'French vuln remediation',
            references: ['Ref1', 'Ref2']
          }
        ]
      },
      {
        status: 1,
        details: [
          {locale: 'en', title: 'New vulnerability from finding', vulnType: 'Internal', description: 'New vuln description'}
        ]
      }
    ]

*/

module.exports = function(request) {
  describe('Vulnerability Suite Tests', () => {
    var options = {headers: {}}
    beforeAll(async done => {
      var response = await request.post('/api/users/token', {username: 'admin', password: 'admin2'})
      options.headers.Cookie = `token=${response.data.datas.token}` // Set header Cookie for next requests
      done()
    })

    

    describe('Vulnerability CRUD operations', () => {
      it('Get vulnerabilities (no existing vulnerabilities in db)', async done => {
        var response = await request.get('/api/vulnerabilities', options)
      
        expect(response.status).toBe(200)
        expect(response.data.datas).toHaveLength(0)
        done()
      })

      it('Get vulnerabilities for export (no existing vulnerabilities in db)', async done => {
        var response = await request.get('/api/vulnerabilities/export', options)
      
        expect(response.status).toBe(200)
        expect(response.data.datas).toHaveLength(0)
        done()
      })

      it('Create 4 vulnerabilities', async done => {
        var vuln1 = {
          details: [{locale: 'en', title: 'Vulnerability English 1', vulnType: 'Internal'}]
        }

        var vuln2 = {
          details: [{locale: 'en', title: 'Vulnerability English 2', vulnType: 'Internal'}]
        }

        var vuln3 = {
          details: [
            {locale: 'es', title: 'Vulnerability Espagnol 1', vulnType: 'Web'},
            {locale: 'es', vulnType: 'Web'},
            {title: 'Vulnerability Espagnol 2', vulnType: 'Web'}
          ]
        }

        var vuln4 = {
          cvssv3: "CVSS3.0:/AV:A/AC:H/PR:N/UI:N/S:C/C:L/I:L/A:L/E:X/RL:X/RC:X/CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X",
          cvssScore: "5.8",
          cvssSeverity: "Medium",
          status: 1,
          details: [{
            locale: 'fr',
            title: 'Vulnerability French 1',
            vulnType: 'Internal',
            description: 'French vuln description',
            observation: 'French vuln observation',
            remediation: 'French vuln remediation',
            references: ['Reference 1', 'Reference 2']
          }]
        }

        var response = await request.post('/api/vulnerabilities', [vuln1, vuln2, vuln3, vuln4], options)
        expect(response.status).toBe(201)
        done()
      })

      it('Should not create vulnerability with with existing title', async done => {
        var vuln1 = {
          details: [{locale: 'fr', title: 'Vulnerability English 1', vulnType: 'Internal'}]
        }

        var response = await request.post('/api/vulnerabilities', [vuln1], options)
        expect(response.status).toBe(422)
        done()
      })

      it('Should not create vulnerability without title', async done => {
        var vuln1 = {
          details: [{locale: 'fr', vulnType: 'Internal'}]
        }

        var response = await request.post('/api/vulnerabilities', [vuln1], options)

        expect(response.status).toBe(422)
        done()
      })

      it('Should not create vulnerability without locale', async done => {
        var vuln1 = {
          details: [{title: 'Vulnerability English', vulnType: 'Internal'}]
        }

        var response = await request.post('/api/vulnerabilities', [vuln1], options)

        expect(response.status).toBe(422)
        done()
      })

      it('Get vulnerabilities (existing vulnerabilities in db)', async done => {
        const vuln1 = expect.objectContaining({
          details: [expect.objectContaining({locale: 'en', title: 'Vulnerability English 1', vulnType: 'Internal'})]
        })

        const vuln2 = expect.objectContaining({
          details: [expect.objectContaining({locale: 'en', title: 'Vulnerability English 2', vulnType: 'Internal'})]
        })

        const vuln3 = expect.objectContaining({
          details: [expect.objectContaining({locale: 'es', title: 'Vulnerability Espagnol 1', vulnType: 'Web'})]
        })

        const vuln4 = expect.objectContaining({
          cvssv3: "CVSS3.0:/AV:A/AC:H/PR:N/UI:N/S:C/C:L/I:L/A:L/E:X/RL:X/RC:X/CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X",
          cvssScore: "5.8",
          cvssSeverity: "Medium",
          status: 0,
          details: [expect.objectContaining({
            locale: 'fr',
            title: 'Vulnerability French 1',
            vulnType: 'Internal',
            description: 'French vuln description',
            observation: 'French vuln observation',
            remediation: 'French vuln remediation',
            references: ['Reference 1', 'Reference 2'],
          })]
        })
        var response = await request.get('/api/vulnerabilities', options)
      
        expect(response.status).toBe(200)
        expect(response.data.datas).toEqual(
          expect.arrayContaining([vuln1, vuln2, vuln3, vuln4])
        )
        done()
      })

      it('Get vulnerabilities for export (existing vulnerabilities in db)', async done => {
        const vuln1 = expect.objectContaining({
          details: [expect.objectContaining({locale: 'en', title: 'Vulnerability English 1', vulnType: 'Internal'})]
        })

        const vuln2 = expect.objectContaining({
          details: [expect.objectContaining({locale: 'en', title: 'Vulnerability English 2', vulnType: 'Internal'})]
        })

        const vuln3 = expect.objectContaining({
          details: [expect.objectContaining({locale: 'es', title: 'Vulnerability Espagnol 1', vulnType: 'Web'})]
        })

        const vuln4 = expect.objectContaining({
          cvssv3: "CVSS3.0:/AV:A/AC:H/PR:N/UI:N/S:C/C:L/I:L/A:L/E:X/RL:X/RC:X/CR:X/IR:X/AR:X/MAV:X/MAC:X/MPR:X/MUI:X/MS:X/MC:X/MI:X/MA:X",
          cvssScore: "5.8",
          cvssSeverity: "Medium",
          details: [expect.objectContaining({
            locale: 'fr',
            title: 'Vulnerability French 1',
            vulnType: 'Internal',
            description: 'French vuln description',
            observation: 'French vuln observation',
            remediation: 'French vuln remediation',
            references: ['Reference 1', 'Reference 2'],
          })]
        })
        var response = await request.get('/api/vulnerabilities/export', options)
      
        expect(response.status).toBe(200)
        expect(response.data.datas).toEqual(
          expect.arrayContaining([vuln1, vuln2, vuln3, vuln4])
        )
        done()
      })

      it('Update vulnerability', async done => {
        var update = {
          cvssv3: "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
          cvssScore: "10.0",
          cvssSeverity: "Critical",
          details: [
            {locale: 'en', title: 'Vulnerability English 2', vulnType: 'Internal'},
            {
              locale: 'fr',
              title: 'Vulnerability French 2',
              vulnType: 'Internal',
              description: 'French vuln description',
              observation: 'French vuln observation',
              remediation: 'French vuln remediation',
              references: ['Ref1', 'Ref2']
            }
          ]
        }

        var vulnerability = expect.objectContaining({
          cvssv3: "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
          cvssScore: "10.0",
          cvssSeverity: "Critical",
          details: [
            expect.objectContaining({locale: 'en', title: 'Vulnerability English 2', vulnType: 'Internal'}),
            expect.objectContaining({
              locale: 'fr',
              title: 'Vulnerability French 2',
              vulnType: 'Internal',
              description: 'French vuln description',
              observation: 'French vuln observation',
              remediation: 'French vuln remediation',
              references: ['Ref1', 'Ref2']
            })
          ]
        })

        var response = await request.get('/api/vulnerabilities', options)
        var vulnId = response.data.datas[1]._id
        response = await request.put(`/api/vulnerabilities/${vulnId}`, update, options)
        expect(response.status).toBe(200)

        response = await request.get('/api/vulnerabilities', options)
        expect(response.data.datas).toEqual(
          expect.arrayContaining([vulnerability])
        )
        done()
      })

      it('Should not update vulnerability with nonexistent ID', async done => {
        var vulnerability = {details: [{locale: 'en', title: 'Vulnerability English'}]}

        var response = await request.put(`/api/vulnerabilities/deadbeefdeadbeefdeadbeef`, vulnerability, options)
        expect(response.status).toBe(404)
        done()
      })

      it('Get vulnerabilities by language', async done => {
        var response = await request.get(`/api/vulnerabilities/en`, options)
        expect(response.status).toBe(200)
        expect(response.data.datas).toHaveLength(2)
        done()
      })

      it('Merge 2 vulnerabilities', async done => {
        var response = await request.get('/api/vulnerabilities', options)
        var vulnId = response.data.datas[0]._id
        var vulnIdMerge = response.data.datas[3]._id

        response = await request.put(`/api/vulnerabilities/merge/${vulnId}`, {vulnId: vulnIdMerge, locale: 'fr'}, options)
        expect(response.status).toBe(200)

        response = await request.get('/api/vulnerabilities', options)
        expect(response.data.datas).toHaveLength(3)
        done()
      })

      it('Delete vulnerability', async done => {
        var response = await request.get('/api/vulnerabilities', options)
        var vulnId = response.data.datas[2]._id
        response = await request.delete(`/api/vulnerabilities/${vulnId}`, options)
        expect(response.status).toBe(200)

        response = await request.get('/api/vulnerabilities', options)
        expect(response.data.datas).toHaveLength(2)
        done()
      })

      it('Delete vulnerability with nonexistent ID', async done => {
        var response = await request.delete(`/api/vulnerabilities/deadbeefdeadbeefdeadbeef`, options)
        expect(response.status).toBe(404)
        done()
      })

      it('Create vulnerability from finding', async done => {
        var finding = {
          title: 'New vulnerability from finding',
          vulnType:  'Internal',
          description: 'New vuln description'
        }
        var response = await request.post('/api/vulnerabilities/finding/en', finding, options)
        expect(response.status).toBe(201)

        response = await request.get('/api/vulnerabilities', options)
        expect(response.data.datas).toHaveLength(3)
        expect(response.data.datas[2].status).toBe(1)
        done()
      })

      it('Update vulnerability from finding', async done => {
        var finding = {
          title: 'Vulnerability English 1',
          description: 'Description English 1',
          observation: 'Observation English 1'
        }
        var response = await request.post('/api/vulnerabilities/finding/en', finding, options)
        expect(response.status).toBe(200)

        response = await request.get('/api/vulnerabilities', options)
        expect(response.data.datas).toHaveLength(3)
        expect(response.data.datas[0].status).toBe(2)
        done()
      })

      it('Should not create/update vulnerability from finding without title', async done => {
        var finding = {
          observation: 'Observation new vuln from finding'
        }
        var response = await request.post('/api/vulnerabilities/finding/en', finding, options)
        expect(response.status).toBe(422)
        done()
      })

      it('Should not update vulnerability from finding that is not yet approved', async done => {
        var finding = {
          title: 'New vulnerability from finding',
          observation: 'Observation new vuln from finding'
        }
        var response = await request.post('/api/vulnerabilities/finding/en', finding, options)
        expect(response.status).toBe(403)
        done()
      })

      it('Get vulnerability updates', async done => {
        var response = await request.get('/api/vulnerabilities', options)
        var vulnId = response.data.datas[0]._id

        response = await request.get(`/api/vulnerabilities/updates/${vulnId}`, options)
        expect(response.status).toBe(200)
        expect(response.data.datas).toHaveLength(1)
        done()
      })
    })
  })
}